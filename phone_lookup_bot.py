import os
import re
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import phonenumbers
from phonenumbers import geocoder, carrier, timezone
from datetime import datetime

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot Configuration
# NOTE: Using the provided token as a default if the environment variable is not set.
# For secure 24/7 deployment, set this token as a secret environment variable on the hosting service (e.g., Render/Railway).
BOT_TOKEN = os.getenv('BOT_TOKEN', '8264207818:AAFksNtrsNSOfG1GCtDkpsuhGgZ463qX_Lg')
ADMIN_ID = 8441069760

# Check if token is available
if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable not set, and default token is missing. The bot cannot start.")
    # This check is more for local development, deployed services should handle this gracefully.

class PhoneNumberBot:
    def __init__(self, token):
        if not token:
            raise ValueError("Telegram Bot Token is required.")
            
        self.token = token
        try:
            self.app = Application.builder().token(token).build()
            logger.info("Bot application builder successful")
        except Exception as e:
            logger.error(f"Failed to build Application: {e}")
            raise
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start command handler"""
        user = update.effective_user
        logger.info(f"User {user.id} ({user.username}) started the bot")
        
        welcome_message = (
            f"ЁЯСЛ Welcome {user.first_name}!\n\n"
            "ЁЯФН *реЮреЛрди рдирдВрдмрд░ реЩреБреЮрд┐рдпрд╛ рдЬрд╛рдирдХрд╛рд░реА (Phone Number Lookup Bot)*\n\n"
            "рдпрд╣ рдмреЙрдЯ рдЖрдкрдХреЛ рдлрд╝реЛрди рдирдВрдмрд░реЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░рдиреЗ рдФрд░ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд░реВрдк рд╕реЗ рдЙрдкрд▓рдмреНрдз рдЬрд╛рдирдХрд╛рд░реА рдПрдХрддреНрд░ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред\n\n"
            "*рдЙрдкрд▓рдмреНрдз рдХрдорд╛рдВрдб:*\n"
            "тАв /start - рдпрд╣ рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рджрд┐рдЦрд╛рдПрдБ\n"
            "тАв /help - рд╡рд┐рд╕реНрддреГрдд рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ\n"
            "тАв /lookup - рдПрдХ рдлрд╝реЛрди рдирдВрдмрд░ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ\n"
            "тАв /about - рдЗрд╕ рдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ\n\n"
            "*рдЬрд▓реНрджреА рд╢реБрд░реВ рдХрд░реЗрдВ:*\n"
            "рдмрд╕ рджреЗрд╢ рдХреЛрдб рдХреЗ рд╕рд╛рде рдПрдХ рдлрд╝реЛрди рдирдВрдмрд░ рднреЗрдЬреЗрдВ!\n"
            "рдЙрджрд╛рд╣рд░рдг: +911234567890 рдпрд╛ +14155552671\n\n"
            "тЪая╕П *рдЕрд╕реНрд╡реАрдХрд░рдг:* рдпрд╣ рдЙрдкрдХрд░рдг рдХреЗрд╡рд▓ рд╢реИрдХреНрд╖рд┐рдХ рдФрд░ рдЦреЛрдЬреА рдЙрджреНрджреЗрд╢реНрдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╣реИред"
        )
        
        try:
            await update.message.reply_text(welcome_message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            await update.message.reply_text("Welcome! Send me a phone number to get started.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Help command handler"""
        help_text = (
            "ЁЯУЦ *рд╡рд┐рд╕реНрддреГрдд рд╕рд╣рд╛рдпрддрд╛ рдЧрд╛рдЗрдб*\n\n"
            "*рдХреИрд╕реЗ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ:*\n"
            "рджреЗрд╢ рдХреЛрдб (рдкреНрд▓рд╕ '+' рд╕рд╣рд┐рдд) рдХреЗ рд╕рд╛рде рдПрдХ рдлрд╝реЛрди рдирдВрдмрд░ рднреЗрдЬреЗрдВ\n\n"
            "*рд╕рдорд░реНрдерд┐рдд рдлреЙрд░реНрдореЗрдЯ:*\n"
            "тАв +[рджреЗрд╢ рдХреЛрдб][рдирдВрдмрд░]\n"
            "тАв рдЙрджрд╛рд╣рд░рдг: +911234567890\n"
            "тАв рдЙрджрд╛рд╣рд░рдг: +14155552671\n\n"
            "*рдЙрдкрд▓рдмреНрдз рд╕реБрд╡рд┐рдзрд╛рдПрдБ:*\n"
            "тЬЕ рджреЗрд╢ рдХреА рдкрд╣рдЪрд╛рди\n"
            "тЬЕ рдХреИрд░рд┐рдпрд░/рдСрдкрд░реЗрдЯрд░ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдирд╛\n"
            "тЬЕ рд╕рдордп рдХреНрд╖реЗрддреНрд░ (Timezone) рдХреА рдЬрд╛рдирдХрд╛рд░реА\n"
            "тЬЕ рдирдВрдмрд░ рд╕рддреНрдпрд╛рдкрди (Validation)\n"
            "тЬЕ рдлреЙрд░реНрдореЗрдЯ рднрд┐рдиреНрдирддрд╛рдПрдБ\n"
            "тЬЕ рд╕рд░реНрдЪ рдЗрдВрдЬрди рд▓рд┐рдВрдХ\n\n"
            "*рдЬрд╛рдБрдЪ рд╡рд┐рдХрд▓реНрдк:*\n"
            "тАв Basic Info - рддреНрд╡рд░рд┐рдд рдЕрд╡рд▓реЛрдХрди\n"
            "тАв All Features - рд╕рдореНрдкреВрд░реНрдг рд╡рд┐рд╢реНрд▓реЗрд╖рдг\n"
            "тАв Search Links - рд╕реЛрд╢рд▓ рдореАрдбрд┐рдпрд╛ рдкрд░ рдЦреЛрдЬреЗрдВ\n\n"
            "*рдЯрд┐рдкреНрд╕:*\n"
            "тАв рд╣рдореЗрд╢рд╛ рджреЗрд╢ рдХреЛрдб рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ\n"
            "тАв '+' рдкреНрд░рддреАрдХ рд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВ\n"
            "тАв рд╕реНрдкреЗрд╕ рдФрд░ рд╡рд┐рд╢реЗрд╖ рд╡рд░реНрдг рд╣рдЯрд╛рдПрдБ\n\n"
            "рд╕рдорд░реНрдерди рдЪрд╛рд╣рд┐рдП? рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"
        )
        
        try:
            await update.message.reply_text(help_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in help command: {e}")
            await update.message.reply_text("Help: Send a phone number with country code to get information.")
    
    async def about_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """About command handler"""
        about_text = (
            "тД╣я╕П *реЮреЛрди рдирдВрдмрд░ реЩреБреЮрд┐рдпрд╛ рдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ*\n\n"
            "рд╡рд░реНреЫрди: 1.0.0\n"
            "рд╕реНрдЯреЗрдЯрд╕: тЬЕ рдСрдирд▓рд╛рдЗрди 24/7\n\n"
            "*рдЙрджреНрджреЗрд╢реНрдп:*\n"
            "рдпрд╣ рдмреЙрдЯ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд░реВрдк рд╕реЗ рдЙрдкрд▓рдмреНрдз рдбреЗрдЯрд╛ рд╕реНрд░реЛрддреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдлрд╝реЛрди рдирдВрдмрд░ рдЬрд╛рдБрдЪ рдХреНрд╖рдорддрд╛рдПрдБ рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИред\n\n"
            "*рдкреНрд░реМрджреНрдпреЛрдЧрд┐рдХреА:*\n"
            "Python рдФрд░ python-telegram-bot рд▓рд╛рдЗрдмреНрд░реЗрд░реА рд╕реЗ рдирд┐рд░реНрдорд┐рдд, рд╕рдЯреАрдХ рдбреЗрдЯрд╛ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдХреЗ рд▓рд┐рдП phonenumbers рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддрд╛ рд╣реИред\n\n"
            "*рд╕реАрдорд╛рдПрдБ:*\n"
            "рдпрд╣ рдЙрдкрдХрд░рдг рдЯреНрд░реИрдХрд┐рдВрдЧ, рд╣реИрдХрд┐рдВрдЧ рдпрд╛ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдордп рд╕реНрдерд╛рди рд╕реЗрд╡рд╛рдПрдБ рдкреНрд░рджрд╛рди рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИред рдпрд╣ рдХреЗрд╡рд▓ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд░реВрдк рд╕реЗ рдЙрдкрд▓рдмреНрдз рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░рддрд╛ рд╣реИред\n\n"
            "тЪб рдмреЙрдЯ 24/7 рдЙрдкрд▓рдмреНрдзрддрд╛ рдХреЗ рд▓рд┐рдП рдХреНрд▓рд╛рдЙрдб рдЗрдВрдлреНрд░рд╛рд╕реНрдЯреНрд░рдХреНрдЪрд░ рдкрд░ рд╣реЛрд╕реНрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред"
        )
        
        try:
            await update.message.reply_text(about_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in about command: {e}")
            await update.message.reply_text("About: This is a phone number lookup bot running 24/7.")
    
    def validate_phone_number(self, phone_number):
        """Validate and parse phone number with improved error handling"""
        try:
            cleaned = re.sub(r'[^\d+]', '', phone_number)
            
            if not cleaned.startswith('+'):
                return None, "Phone number must start with + and country code"
            
            if len(cleaned) < 8:
                return None, "Phone number is too short"
            
            parsed = phonenumbers.parse(cleaned, None)
            
            if phonenumbers.is_valid_number(parsed):
                return parsed, None
            else:
                if phonenumbers.is_possible_number(parsed):
                    return parsed, "Number is possible but may not be valid"
                return None, "Invalid phone number format"
                
        except phonenumbers.phonenumberutil.NumberParseException as e:
            return None, f"Parse error: Could not recognize number: {str(e)}"
        except Exception as e:
            logger.error(f"Unexpected error in validate_phone_number: {e}")
            return None, "Error processing phone number"
    
    def get_basic_info(self, parsed_number):
        """Get basic information with comprehensive error handling"""
        try:
            country = "рдЕрдЬреНрдЮрд╛рдд"
            carrier_name = "рдЕрдЬреНрдЮрд╛рдд"
            timezones = []
            
            try:
                country = geocoder.description_for_number(parsed_number, "en") or "рдЕрдЬреНрдЮрд╛рдд"
            except Exception as e:
                logger.error(f"Error getting country: {e}")
            
            try:
                carrier_name = carrier.name_for_number(parsed_number, "en") or "рдЕрдЬреНрдЮрд╛рдд"
            except Exception as e:
                logger.error(f"Error getting carrier: {e}")
            
            try:
                timezones = timezone.time_zones_for_number(parsed_number) or []
            except Exception as e:
                logger.error(f"Error getting timezone: {e}")
            
            info = {
                'country': country,
                'carrier': carrier_name,
                'timezone': timezones,
                'number_type': phonenumbers.number_type(parsed_number),
                'international_format': phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.INTERNATIONAL),
                'national_format': phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.NATIONAL),
                'e164_format': phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.E164),
                'is_possible': phonenumbers.is_possible_number(parsed_number),
                'is_valid': phonenumbers.is_valid_number(parsed_number),
                'country_code': parsed_number.country_code,
                'national_number': parsed_number.national_number
            }
            return info
            
        except Exception as e:
            logger.error(f"Error in get_basic_info: {e}")
            return None
    
    def get_search_links(self, phone_number):
        """Generate search engine links"""
        try:
            number_no_plus = phone_number.replace('+', '') 
            encoded = phone_number.replace('+', '%2B').replace(' ', '+')
            
            links = {
                'Google': f"https://www.google.com/search?q={encoded}",
                'TrueCaller': f"https://www.truecaller.com/search/in/{number_no_plus}",
                'Facebook': f"https://www.facebook.com/search/top/?q={encoded}",
                'LinkedIn': f"https://www.linkedin.com/search/results/all/?keywords={encoded}",
                'Twitter (X)': f"https://twitter.com/search?q={encoded}",
                'Instagram (Tag)': f"https://www.instagram.com/explore/tags/{number_no_plus}"
            }
            return links
        except Exception as e:
            logger.error(f"Error generating search links: {e}")
            return {}
    
    def format_number_type(self, number_type):
        """Convert number type enum to readable string"""
        types = {
            0: "рдлрд┐рдХреНрд╕реНрдб рд▓рд╛рдЗрди (Fixed Line)",
            1: "рдореЛрдмрд╛рдЗрд▓ (Mobile)",
            2: "рдлрд┐рдХреНрд╕реНрдб рд▓рд╛рдЗрди рдпрд╛ рдореЛрдмрд╛рдЗрд▓ (Fixed Line or Mobile)",
            3: "рдЯреЛрд▓ рдлреНрд░реА (Toll Free)",
            4: "рдкреНрд░реАрдорд┐рдпрдо рд░реЗрдЯ (Premium Rate)",
            5: "рд╕рд╛рдЭрд╛ рд▓рд╛рдЧрдд (Shared Cost)",
            6: "VoIP",
            7: "рд╡реНрдпрдХреНрддрд┐рдЧрдд рдирдВрдмрд░ (Personal Number)",
            8: "рдкреЗрдЬрд░ (Pager)",
            9: "UAN",
            10: "рд╡реЙрдпрд╕рдореЗрд▓ (Voicemail)",
            -1: "рдЕрдЬреНрдЮрд╛рдд (Unknown)"
        }
        return types.get(number_type, "рдЕрдЬреНрдЮрд╛рдд (Unknown)")
    
    async def handle_phone_number(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle phone number input with comprehensive error handling"""
        try:
            phone_number = update.message.text.strip()
            user = update.effective_user
            
            logger.info(f"User {user.id} requested lookup for: {phone_number}")
            
            processing_msg = await update.message.reply_text("ЁЯФН рдлрд╝реЛрди рдирдВрдмрд░ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛ рд░рд╣рд╛ рд╣реИ... рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВред")
            
            parsed, error = self.validate_phone_number(phone_number)
            
            if error and not parsed:
                await processing_msg.edit_text(
                    f"тЭМ {error}\n\n"
                    "рдХреГрдкрдпрд╛ рджреЗрд╢ рдХреЛрдб рдХреЗ рд╕рд╛рде рдПрдХ рдорд╛рдиреНрдп рдлрд╝реЛрди рдирдВрдмрд░ рднреЗрдЬреЗрдВред\n"
                    "реЮреЙрд░реНрдореЗрдЯ: +[country code][number]\n"
                    "рдЙрджрд╛рд╣рд░рдг: +911234567890"
                )
                return
            
            context.user_data['phone_number'] = phone_number
            context.user_data['parsed_number'] = parsed
            
            keyboard = [
                [InlineKeyboardButton("ЁЯУЛ рдмреБрдирд┐рдпрд╛рджреА рдЬрд╛рдирдХрд╛рд░реА (Basic Info)", callback_data='basic')],
                [InlineKeyboardButton("ЁЯФН рд╕рдВрдкреВрд░реНрдг рдЬрд╛рдирдХрд╛рд░реА (All Features)", callback_data='all')],
                [InlineKeyboardButton("ЁЯМР рд╕рд░реНрдЪ рд▓рд┐рдВрдХ (Search Links)", callback_data='links')],
                [InlineKeyboardButton("тЭМ рд░рджреНрдж рдХрд░реЗрдВ (Cancel)", callback_data='cancel')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            status_text = "тЬЕ рдлрд╝реЛрди рдирдВрдмрд░ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдорд╛рдиреНрдп рдХрд┐рдпрд╛ рдЧрдпрд╛!"
            if error:
                status_text = f"тЪая╕П {error}"
            
            await processing_msg.edit_text(
                f"{status_text}\n\n"
                f"ЁЯУ▒ рдирдВрдмрд░: `{phone_number}`\n\n"
                f"рдХреГрдкрдпрд╛ рд╡рд╣ рдЬрд╛рдирдХрд╛рд░реА рдЪреБрдиреЗрдВ рдЬрд┐рд╕реЗ рдЖрдк рдкреНрд░рд╛рдкреНрдд рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error in handle_phone_number: {e}")
            try:
                await update.message.reply_text(
                    "тЭМ рдЖрдкрдХреЗ рдЕрдиреБрд░реЛрдз рдХреЛ рд╕рдВрд╕рд╛рдзрд┐рдд рдХрд░рддреЗ рд╕рдордп рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИред "
                    "рдХреГрдкрдпрд╛ рдПрдХ рдорд╛рдиреНрдп рдлрд╝реЛрди рдирдВрдмрд░ рдХреЗ рд╕рд╛рде рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
                )
            except:
                pass
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle button callbacks with error handling"""
        try:
            query = update.callback_query
            await query.answer()
            
            choice = query.data
            
            if choice == 'cancel':
                await query.edit_message_text("тЭМ рдСрдкрд░реЗрд╢рди рд░рджреНрдж рдХрд┐рдпрд╛ рдЧрдпрд╛ред")
                return
            
            phone_number = context.user_data.get('phone_number')
            parsed_number = context.user_data.get('parsed_number')
            
            if not phone_number or not parsed_number:
                await query.edit_message_text(
                    "тЭМ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдлрд╝реЛрди рдирдВрдмрд░ рдлрд┐рд░ рд╕реЗ рднреЗрдЬреЗрдВред"
                )
                return
            
            await query.edit_message_text("тП│ рдЬрд╛рдирдХрд╛рд░реА рдЬреБрдЯрд╛рдИ рдЬрд╛ рд░рд╣реА рд╣реИ... рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВред")
            
            if choice == 'basic':
                result = self.generate_basic_info_report(parsed_number, phone_number)
            elif choice == 'all':
                result = self.generate_full_report(parsed_number, phone_number)
            elif choice == 'links':
                result = self.generate_links_report(phone_number)
            else:
                result = "тЭМ рдЕрдорд╛рдиреНрдп рд╡рд┐рдХрд▓реНрдк рдЪреБрдирд╛ рдЧрдпрд╛ред"
            
            await query.edit_message_text(
                result, 
                parse_mode='Markdown', 
                disable_web_page_preview=True
            )
            
            logger.info(f"Successfully processed {choice} request for {phone_number}")
            
        except Exception as e:
            logger.error(f"Error in button_callback: {e}")
            try:
                await query.edit_message_text(
                    "тЭМ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░рддреЗ рд╕рдордп рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
                )
            except:
                pass
    
    def generate_basic_info_report(self, parsed_number, phone_number):
        """Generate basic information report"""
        try:
            info = self.get_basic_info(parsed_number)
            
            if not info:
                return "тЭМ рдЗрд╕ рдирдВрдмрд░ рдХреЗ рд▓рд┐рдП рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдирд╣реАрдВ рдХреА рдЬрд╛ рд╕рдХреАред"
            
            timezone_str = ', '.join(info['timezone']) if info['timezone'] else 'рдЕрдЬреНрдЮрд╛рдд'
            
            report = (
                f"ЁЯУК *рдмреБрдирд┐рдпрд╛рджреА рдЬрд╛рдирдХрд╛рд░реА рд░рд┐рдкреЛрд░реНрдЯ (Basic Information Report)*\n\n"
                f"ЁЯУ▒ *рдлрд╝реЛрди рдирдВрдмрд░:* `{phone_number}`\n\n"
                f"ЁЯМН *рджреЗрд╢:* {info['country']}\n"
                f"ЁЯУб *рдХреИрд░рд┐рдпрд░:* {info['carrier']}\n"
                f"ЁЯХР *рд╕рдордп рдХреНрд╖реЗрддреНрд░:* {timezone_str}\n"
                f"ЁЯУЮ *рдкреНрд░рдХрд╛рд░:* {self.format_number_type(info['number_type'])}\n"
                f"ЁЯФв *рджреЗрд╢ рдХреЛрдб:* +{info['country_code']}\n\n"
                f"*рдлреЙрд░реНрдореЗрдЯ рднрд┐рдиреНрдирддрд╛рдПрдБ:*\n"
                f"тАв рдЕрдВрддрд░реНрд░рд╛рд╖реНрдЯреНрд░реАрдп: `{info['international_format']}`\n"
                f"тАв рд░рд╛рд╖реНрдЯреНрд░реАрдп: `{info['national_format']}`\n"
                f"тАв E164: `{info['e164_format']}`\n\n"
                f"*рд╕рддреНрдпрд╛рдкрди:*\n"
                f"тАв рдорд╛рдиреНрдп: {'тЬЕ рд╣рд╛рдБ' if info['is_valid'] else 'тЭМ рдирд╣реАрдВ'}\n"
                f"тАв рд╕рдВрднрд╡: {'тЬЕ рд╣рд╛рдБ' if info['is_possible'] else 'тЭМ рдирд╣реАрдВ'}\n\n"
                f"тЪая╕П *рдЕрд╕реНрд╡реАрдХрд░рдг:* рдЬрд╛рдирдХрд╛рд░реА рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд░реВрдк рд╕реЗ рдЙрдкрд▓рдмреНрдз рдбреЗрдЯрд╛ рдкрд░ рдЖрдзрд╛рд░рд┐рдд рд╣реИред\n"
                f"ЁЯУЕ рд░рд┐рдкреЛрд░реНрдЯ рдЬрдирд░реЗрдЯ рдХреА рдЧрдИ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}"
            )
            
            return report
            
        except Exception as e:
            logger.error(f"Error generating basic report: {e}")
            return "тЭМ рд░рд┐рдкреЛрд░реНрдЯ рдЬрдирд░реЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
    
    def generate_full_report(self, parsed_number, phone_number):
        """Generate comprehensive report"""
        try:
            info = self.get_basic_info(parsed_number)
            
            if not info:
                return "тЭМ рдЗрд╕ рдирдВрдмрд░ рдХреЗ рд▓рд┐рдП рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдирд╣реАрдВ рдХреА рдЬрд╛ рд╕рдХреАред"
            
            timezone_str = ', '.join(info['timezone']) if info['timezone'] else 'рдЕрдЬреНрдЮрд╛рдд'
            
            report = (
                f"ЁЯУК *рд╡реНрдпрд╛рдкрдХ рдЬрд╛рдВрдЪ рд░рд┐рдкреЛрд░реНрдЯ (COMPREHENSIVE INVESTIGATION REPORT)*\n"
                f"{'='*40}\n\n"
                f"ЁЯОп *рд▓рдХреНрд╖реНрдп рдирдВрдмрд░:* `{phone_number}`\n\n"
                f"*ЁЯФН рдмреБрдирд┐рдпрд╛рджреА рдЬрд╛рдирдХрд╛рд░реА*\n"
                f"тФЬтФА рджреЗрд╢: {info['country']}\n"
                f"тФЬтФА рджреЗрд╢ рдХреЛрдб: +{info['country_code']}\n"
                f"тФЬтФА рдХреИрд░рд┐рдпрд░/рдСрдкрд░реЗрдЯрд░: {info['carrier']}\n"
                f"тФЬтФА рд╕рдордп рдХреНрд╖реЗрддреНрд░: {timezone_str}\n"
                f"тФФтФА рдирдВрдмрд░ рдкреНрд░рдХрд╛рд░: {self.format_number_type(info['number_type'])}\n\n"
                f"*ЁЯУЛ рдлреЙрд░реНрдореЗрдЯ рднрд┐рдиреНрдирддрд╛рдПрдБ*\n"
                f"тФЬтФА рдЕрдВрддрд░реНрд░рд╛рд╖реНрдЯреНрд░реАрдп: `{info['international_format']}`\n"
                f"тФЬтФА рд░рд╛рд╖реНрдЯреНрд░реАрдп: `{info['national_format']}`\n"
                f"тФЬтФА E164: `{info['e164_format']}`\n"
                f"тФФтФА рд░рд╛рд╖реНрдЯреНрд░реАрдп рдирдВрдмрд░: {info['national_number']}\n\n"
                f"*тЬУ рд╕рддреНрдпрд╛рдкрди рд╕реНрдерд┐рддрд┐*\n"
                f"тФЬтФА рдорд╛рдиреНрдп рдирдВрдмрд░: {'тЬЕ рд╣рд╛рдБ' if info['is_valid'] else 'тЭМ рдирд╣реАрдВ'}\n"
                f"тФФтФА рд╕рдВрднрд╡ рдирдВрдмрд░: {'тЬЕ рд╣рд╛рдБ' if info['is_possible'] else 'тЭМ рдирд╣реАрдВ'}\n\n"
            )
            
            links = self.get_search_links(phone_number)
            if links:
                report += "*ЁЯФЧ рд╕рд░реНрдЪ рд▓рд┐рдВрдХ*\n"
                for platform, link in links.items():
                    report += f"тФЬтФА [{platform}]({link})\n"
                report += "\n"
            
            report += (
                f"*тЪая╕П рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЕрд╕реНрд╡реАрдХрд░рдг*\n"
                f"рдпрд╣ рдЙрдкрдХрд░рдг рдХреЗрд╡рд▓ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд╕реНрд░реЛрддреЛрдВ рд╕реЗ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИред "
                f"рдпрд╣ рдЯреНрд░реИрдХрд┐рдВрдЧ, рд╣реИрдХрд┐рдВрдЧ, рдпрд╛ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдордп рд╕реНрдерд╛рди рдбреЗрдЯрд╛ рдкреНрд░рджрд╛рди рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИред "
                f"рдХреГрдкрдпрд╛ рдЬрд┐рдореНрдореЗрджрд╛рд░реА рдФрд░ рдиреИрддрд┐рдХ рд░реВрдк рд╕реЗ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред\n\n"
                f"ЁЯУЕ рд░рд┐рдкреЛрд░реНрдЯ рдЬрдирд░реЗрдЯ рдХреА рдЧрдИ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\n"
                f"ЁЯдЦ рдмреЙрдЯ рд╕реНрдерд┐рддрд┐: рдСрдирд▓рд╛рдЗрди 24/7"
            )
            
            return report
            
        except Exception as e:
            logger.error(f"Error generating full report: {e}")
            return "тЭМ рд╡реНрдпрд╛рдкрдХ рд░рд┐рдкреЛрд░реНрдЯ рдЬрдирд░реЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
    
    def generate_links_report(self, phone_number):
        """Generate search links report"""
        try:
            links = self.get_search_links(phone_number)
            
            if not links:
                return "тЭМ рд╕рд░реНрдЪ рд▓рд┐рдВрдХ рдЬрдирд░реЗрдЯ рдирд╣реАрдВ рдХрд┐рдП рдЬрд╛ рд╕рдХреЗред"
            
            report = (
                f"ЁЯФЧ *{phone_number} рдХреЗ рд▓рд┐рдП рд╕рд░реНрдЪ рд▓рд┐рдВрдХ*\n\n"
                f"рдЗрд╕ рдирдВрдмрд░ рдХреЛ рд╡рд┐рднрд┐рдиреНрди рдкреНрд▓реЗрдЯрдлрд╛рд░реНрдореЛрдВ рдкрд░ рдЦреЛрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдХрд┐рд╕реА рднреА рд▓рд┐рдВрдХ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ:\n\n"
            )
            
            for platform, link in links.items():
                report += f"ЁЯФ╣ [{platform}]({link})\n"
            
            report += (
                f"\nЁЯТб *рдЙрдкрдпреЛрдЧ рдХреЗ рдЯрд┐рдкреНрд╕:*\n"
                f"тАв рдпреЗ рд▓рд┐рдВрдХ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд░реВрдк рд╕реЗ рдЙрдкрд▓рдмреНрдз рдЬрд╛рдирдХрд╛рд░реА рдЦреЛрдЬрддреЗ рд╣реИрдВ\n"
                f"тАв рдкрд░рд┐рдгрд╛рдо рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдХреЗ рдЕрдиреБрд╕рд╛рд░ рднрд┐рдиреНрди рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ\n"
                f"тАв рдХреБрдЫ рдкреНрд▓реЗрдЯрдлрд╛рд░реНрдореЛрдВ рдХреЗ рд▓рд┐рдП рд▓реЙрдЧрд┐рди рдЖрд╡рд╢реНрдпрдХ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ\n"
                f"тАв рд╕рднреА рдкреНрд▓реЗрдЯрдлрд╛рд░реНрдореЛрдВ рдкрд░ рдбреЗрдЯрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ\n\n"
                f"тЪая╕П рдЗрди рдЙрдкрдХрд░рдгреЛрдВ рдХрд╛ рдЬрд┐рдореНрдореЗрджрд╛рд░реА рд╕реЗ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдФрд░ рдЧреЛрдкрдиреАрдпрддрд╛ рдХрд╛рдиреВрдиреЛрдВ рдХрд╛ рд╕рдореНрдорд╛рди рдХрд░реЗрдВред"
            )
            
            return report
            
        except Exception as e:
            logger.error(f"Error generating links report: {e}")
            return "тЭМ рд╕рд░реНрдЪ рд▓рд┐рдВрдХ рдЬрдирд░реЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
    
    async def lookup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Lookup command handler"""
        try:
            await update.message.reply_text(
